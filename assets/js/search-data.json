{
  
    
        "post0": {
            "title": "Build an ML model that predicts which Tweets are about real disasters.([Link](https://www.kaggle.com/c/nlp-getting-started))",
            "content": "Import packages . import re import string import re import numpy as np import pandas as pd from itertools import chain # Data Vizualization packages import seaborn as sns import matplotlib.pyplot as plt # Sklearn packages from sklearn.model_selection import train_test_split # NLP packages import nltk from nltk.tokenize import word_tokenize import emoji from nltk.corpus import stopwords from nltk.stem import PorterStemmer from nltk.tokenize import TweetTokenizer . Helper functions . Tips on data cleaning . Consider the words of your corpus as case insensitive. ex &quot;THE&quot;==&quot;the&quot;==&quot;The&quot; | Represent all interrupting punctuation marks as a single special word of the vocabulary. | Ignore non interrupting punctuation marks such a quotes. | Collapse multiple sign marks into a single mark. Ex- &quot;???&quot; -&gt; &quot;?&quot; | If numbers do not carry a special meaning in your use case you can drop them. | If numbers are meaingful for your use case you can keep them, however if you have a lot of unique numbers in your corpus it&#39;s safe to replace them with a single token. | It is usually safe to drop the special characters like $ alpha$, $ mathscr{L}$. | Special words Emojis or hashtags can be considered as a separate word. | . nltk.download(&#39;punkt&#39;) # Pre trained tokenizer for english. corpus = &#39;Who ❤️ &quot;word embeddings&quot; in 2020? I do!!!&#39; data = re.sub(r&#39;[,!?;-]+&#39;, &#39;.&#39;, corpus) print(data) data = nltk.word_tokenize(data) data = [char for char in data if char.isalpha() or char == &#39;.&#39; or emoji.get_emoji_regexp().search(char)] print(data) . def process_tweet(tweet): &#39;&#39;&#39; Input: tweet: a string containing a tweet Output: tweets_clean: a list of words containing the processed tweet &#39;&#39;&#39; stemmer = PorterStemmer() stopwords_english = stopwords.words(&#39;english&#39;) # remove stock market tickers like $GE tweet = re.sub(r&#39; $ w*&#39;, &#39;&#39;, tweet) # remove old style retweet text &quot;RT&quot; tweet = re.sub(r&#39;^RT[ s]+&#39;, &#39;&#39;, tweet) # remove hyperlinks tweet = re.sub(r&#39;https?: / /.*[ r n]*&#39;, &#39;&#39;, tweet) # remove hashtags # only removing the hash # sign from the word tweet = re.sub(r&#39;#&#39;, &#39;&#39;, tweet) # tokenize tweets tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True) tweet_tokens = tokenizer.tokenize(tweet) tweets_clean = [] for word in tweet_tokens: if (word not in stopwords_english and # remove stopwords word not in string.punctuation): # remove punctuation # tweets_clean.append(word) stem_word = stemmer.stem(word) # stemming word tweets_clean.append(stem_word) return tweets_clean # Credits: https://www.kaggle.com/tanulsingh077/twitter-sentiment-extaction-analysis-eda-and-model?scriptVersionId=31982648&amp;cellId=51 # def clean_text(text): # &#39;&#39;&#39;Make text lowercase, remove text in square brackets,remove links,remove punctuation # and remove words containing numbers.&#39;&#39;&#39; # text = str(text).lower() # text = re.sub(&#39; [.*? ]&#39;, &#39;&#39;, text) # text = re.sub(&#39;https?:// S+|www . S+&#39;, &#39;&#39;, text) # text = re.sub(&#39;&lt;.*?&gt;+&#39;, &#39;&#39;, text) # text = re.sub(&#39;[%s]&#39; % re.escape(string.punctuation), &#39;&#39;, text) # text = re.sub(&#39; n&#39;, &#39;&#39;, text) # text = re.sub(&#39; w* d w*&#39;, &#39;&#39;, text) # return text . Import Data . PATH = &#39;../input/nlp-getting-started/&#39; train = pd.read_csv(f&#39;{PATH}train.csv&#39;) test = pd.read_csv(f&#39;{PATH}test.csv&#39;) sample_submission = pd.read_csv(f&#39;{PATH}sample_submission.csv&#39;) . EDA . train.head() . Keyword and location features have null values in the train as well as the test data sets. . train.info() , test.info() . There is no significant class imbalance in this problem and can be considered as a balanced problem. . train[&#39;target&#39;].value_counts(normalize=True) . 1. Let&#39;s explore the keyword feature. . There are 221 unique values that the keyword feature takes. . train[&#39;keyword&#39;].nunique() . Let&#39;s look at top 10 keywords and their frequencies. . train.groupby([&#39;keyword&#39;])[&#39;keyword&#39;].count()[:10] . Data Preprocessing . train[&#39;text_clean&#39;] = train[&#39;text&#39;].apply(process_tweet) test[&#39;text_clean&#39;] = test[&#39;text&#39;].apply(process_tweet) . train.head() . Split the data into train and validation sets. . X = train.loc[:, [&#39;text_clean&#39;]] y = np.ravel(train.loc[:,&#39;target&#39;]) X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.25,random_state=42, shuffle=True, stratify=y) . type(X) . X_train.shape, X_val.shape, y_train.shape, y_val.shape . X_train.head() . Develop Naive Bayes algorithm from scratch . begin{equation*} P(A | B) = frac {P(B | A) * P(A)}{P(B)} end{equation*}Prior probability: $P(A)$ is the probability of an event before new data is collected. Posterior probability: $P(A mid B)$ is the revised or updated probability of an event occurring after taking into consideration new information Likelihood: $P(B mid A)$ Referred to as likelihood. Evidence: $P(B)$ Referred to as evidence. . Understanding Naive Bayes Algorithm . This algorithm is all about conditional probabilities. The basic idea is to calculate the probability of observing different words given that they occur in a disaster or non-disaster tweet. For example, what is the probability of observing the word &quot;ablaze&quot;, in a disaster and non-disaster tweet. $P(ablaze mid disaster)$ and $P(ablaze mid non-disaster)$. Similarly we can calculate these probabilities of all the words in the corpus and then use the Bayes Rule to calculate the inverse probability $P(disaster mid ablaze)$. . Let&#39;s understand how this can be used to classify a tweet as disaster or non-disaster. . Create a list of all the words in the corpus. This is also know as the vocabulary. The snippet below indicates how to do this. . def get_vocabulary(X_train): vocab = X_train[&#39;text_clean&#39;].tolist() # Convert series to list of tokens. vocab = list(chain.from_iterable(vocab)) # Unest the list. vocab = set(vocab) # Get the distinct tokens from list. vocab = list(set(vocab)) # Convert the set to list return vocab . Next step is to calculate the probability of getting a disaster and non-disaster tweet $P(disaster)$ and $P(non-disaster)$. This is very simple since we have the labelled training data which we can use to get this. Using this we can define the prior which nothig but the ratio of disaster to non-disaster tweets in our training data. $$ frac{P(disaster)} {P(non-disaster)}$$ . def get_log_prior(y_train): T = len(y_train) # Total number of tweets D = np.sum(y_train) # No of tweets about disasters. ND = T - D # No of tweets not about disasters. P_D = D / T # Probability of getting a tweet about disaster in the corpus. P_ND = 1 - P_D # Probability of getting a non-disaster tweet in the corpus. log_prior = np.log(P_D / P_ND) return log_prior . def frequency_dict(X_train, y_train): d = dict() for tweet, label in zip (X_train[&#39;text_clean&#39;], y_train): for word in tweet: pair = (word, label) if pair in d: d[pair] += 1 else: d[pair] = 1 return d . def compute_likelihood(freqs_dict, vocab): # Get the sum of frequencies of occurrence of words in case of disaster and non-disaster. sum_words_pos = 0 # Sum of the Frequency of a token in tweets that are about Disaster. sum_words_neg = 0 # Sum of the Frequency of a token in tweets that are Not Disaster related. loglikelihood = dict() for pair, cnt in freqs_dict.items(): if pair[1] == 1: sum_words_pos += cnt else: sum_words_neg += cnt for token in vocab: pos_cnt = freqs_dict.get((token, 1), 0) neg_cnt = freqs_dict.get((token, 0), 0) p_pos = (pos_cnt + 1) / (sum_words_pos + len(vocab)) # Probability that the tweet is about disaster given the word. p_neg = (neg_cnt + 1) / (sum_words_neg + len(vocab)) # Probability that the tweet is not about disaster given the word. ratio = np.log(p_pos/p_neg) # Log likelihood for the word. loglikelihood[token] = ratio return loglikelihood . def train_naive_bayes(X_train, y_train): logprior = get_log_prior(y_train) vocab = get_vocabulary(X_train) freqs_dict = frequency_dict(X_train, y_train) loglikelihood = compute_likelihood(freqs_dict, vocab) return logprior, loglikelihood . logprior, loglikelihood = train_naive_bayes(X_train, y_train) . def predict_naive_bayes(X, logprior, loglikelihood): y_pred = list() for row in X.itertuples(): prediction = logprior tweet = row.text_clean for token in tweet: prediction += loglikelihood.get(token, 0) temp = 1 if prediction &gt; 0 else 0 y_pred.append(temp) return y_pred . Check accuracy on validation set . y_pred = predict_naive_bayes(X_val, logprior, loglikelihood) . count = 0 for actual, prediction in zip(y_val, y_pred): if actual == prediction: count += 1 print(count / len(y_val)) . Prediction on Test data. . y_test = predict_naive_bayes(test, logprior, loglikelihood) df_out = pd.DataFrame({ &#39;id&#39;: test[&#39;id&#39;], &#39;target&#39;: y_test }) df_out.to_csv(&#39;df_out.csv&#39;,mode = &#39;w&#39;, index=False) . Using Naive Bayes from Sklearn . Now let&#39;s use .",
            "url": "https://magicaditya.github.io/mlexplained/2021/08/23/Naive-Bayes-Explained.html",
            "relUrl": "/2021/08/23/Naive-Bayes-Explained.html",
            "date": " • Aug 23, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://magicaditya.github.io/mlexplained/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://magicaditya.github.io/mlexplained/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://magicaditya.github.io/mlexplained/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}